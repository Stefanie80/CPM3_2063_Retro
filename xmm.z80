serial: db 0,0,0,0,0,0
start:		jp pstart		; start of Program
next: 		db 0c3h 		; jump instruction to
			dw 0			; next module in line
Prev: 		dw 0 			; Previous module
remove: 	db 0	 		; remove flag
nonbank: 	db 0 			; nonbank flag
name: 		db 'XMM      ' 	; any B-character name
loader: 	db 0,0,0 		; loader flag

window: ds 2048

BDOS equ 5

BIOSPB: 
func:	db 30	; BIOS function no.
areg: 	db 0 	; A register contents
creg:	db 1 	;
breg: 	db 0 	; BC register contents
dereg:	dw 0 	; DE register contents
hlreg:	dw 0 	; HL register contents



pstart:
	ld a,c
	cp 0FFh		; intercept BDOS function 255
	jp z,doit
	jp next
	
doit:
	ld a,b
	or a
	jp z,.zero
	dec a
	jp z,.one
	ret

.zero:
	; this will be the read/write call
	ld a,d
	or a
	jr z,.loadmem
	; write block here
	xor a
	ld (creg),a
	ld (breg),a
	ld hl,0100h
	ld l,e
	ld (dereg),hl
	ld c,032h
	ld de,BIOSPB
	call BDOS	
	jr .zeroend
.loadmem:	
	xor a
	ld (breg),a
	ld (creg),a
	ld hl,0
	ld l,e
	ld (dereg),hl
	ld c,032h
	ld de,BIOSPB
	call BDOS
.zeroend:	
	ret

.one:
	; initialize the window base
	ld hl,window
	ld (dereg),hl
	ld c,032h
	ld de,BIOSPB
	call BDOS
	ld de,(dereg)
	ld hl,(hlreg)
	ret

end
