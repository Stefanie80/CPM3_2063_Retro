;****************************************************************************
;
;    Z80 Retro! BIOS
;
;    Copyright (C) 2021,2022 John Winans
;
;    This library is free software; you can redistribute it and/or
;    modify it under the terms of the GNU Lesser General Public
;    License as published by the Free Software Foundation; either
;    version 2.1 of the License, or (at your option) any later version.
;
;    This library is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;    Lesser General Public License for more details.
;
;    You should have received a copy of the GNU Lesser General Public
;    License along with this library; if not, write to the Free Software
;    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
;    USA
;
;****************************************************************************


;##########################################################################
; set .rw_debug to:
;    0 = no debug output
;    1 = print messages from new code under development
;    2 = print all the above plus the primairy 'normal' debug messages
;    3 = print all the above plus verbose 'noisy' debug messages
;##########################################################################


.rw_debug:		equ	0


; XXX This is a hack that won't work unless the disk partition < 0x10000
; XXX This has the SD card partition offset hardcoded in it!!!
.sd_partition_base: equ	0;800h


; declaratios for the SCB
	; extrn	@adrv,@rdrv
	; extrn	@dma,@trk,@sect
	; extrn	@dbnk

;declaratios for debug
	extrn	iputs, hexdump_a
	
;other declarations
	;extrn sd_stack
tmp_stck:
		ds 128
sd_stack:


;##########################################################################
;
; CP/M 2.2 Alteration Guide p19:
; Assuming the drive has been selected, the track has been set, the sector
; has been set, and the DMA address has been specified, the READ subroutine
; attempts to read one sector based upon these parameters, and returns the
; following error codes in register A:
;
;    0 no errors occurred
;    1 non-recoverable error condition occurred
;
; When an error is reported the BDOS will print the message "BDOS ERR ON
; x: BAD SECTOR".  The operator then has the option of typing <cr> to ignore
; the error, or ctl-C to abort.
;
;##########################################################################
nc_read:
if .rw_debug >= 1
	call	iputs
	db	'.bios_read entered: ',0
	call	bios_debug_disk
endif

	; switch to a local stack (we only have a few levels when called from the BDOS!)
	push	hl			; save HL into the caller's stack
	ld	hl,0
	add	hl,sp			; HL = SP
	ld	sp,sd_stack		; SP = temporary private BIOS stack area
	push	hl			; save the old SP value in the BIOS stack
	push	bc			; save the register pairs we will otherwise clobber
	push	de			; this is not critical but may make WBOOT cleaner later

	ld	hl,(bios_disk_track)	; HL = CP/M track number

	; Check to see if the SD block in .bios_sdbuf is already the one we want
	ld	a,(.bios_sdbuf_val)	; get the .bios_sdbuf valid flag
	or	a			; is it a non-zero value?
	jr	nz,.bios_read_block	; block buffer is invalid, read the SD block

	ld	a,(.bios_sdbuf_trk)	; A = CP/M track LSB
	cp	l			; is it the one we want?
	jr	nz,.bios_read_block	; LSB does not match, read the SD block

	ld	a,(.bios_sdbuf_trk+1)	; A = CP/M track MSB
	cp	h			; is it the one we want?
	jr	z,.bios_read_sd_ok	; The SD block in .bios_sdbuf is the one we want!

.bios_read_block:
if .rw_debug >= 2
	call	iputs
	db	'.bios_read cache miss: ',0
	call	bios_debug_disk
endif

	; Assume all will go well reading the SD card block.
	; We only need to touch this if we are going to actually read the SD card.
	ld	(.bios_sdbuf_trk),hl	; store the current CP/M track number in the .bios_sdbuf
	xor	a			; A = 0
	ld	(.bios_sdbuf_val),a	; mark the .bios_sdbuf as valid

	ld	de,.sd_partition_base	; XXX add the starting partition block number
	add	hl,de			; HL = SD physical block number

	; push the 32-bit physical SD block number into the stack in little-endian order
	ld	de,0
	push	de			; 32-bit SD block number (big end)
	push	hl			; 32-bit SD block number (little end)
	ld	de,.bios_sdbuf		; DE = target buffer to read the 512-byte block
	call	sd_cmd17		; read the SD block
	pop	hl			; clean the SD block number from the stack
	pop	de

	or	a			; was the SD driver read OK?
	jr	z,.bios_read_sd_ok

	call	iputs
	db	'BIOS_READ FAILED!',cr,lf,0
	ld	a,1			; tell CP/M the read failed
	ld	(.bios_sdbuf_val),a	; mark the .bios_sdbuf as invalid
	jp	.bios_read_ret

.bios_read_sd_ok:

	; calculate the CP/M sector offset address (@sect*128)
	ld	hl,(bios_disk_sector)	; must be 0..3
	add	hl,hl			; HL *= 2
	add	hl,hl			; HL *= 4
	add	hl,hl			; HL *= 8
	add	hl,hl			; HL *= 16
	add	hl,hl			; HL *= 32
	add	hl,hl			; HL *= 64
	add	hl,hl			; HL *= 128

	; calculate the address of the CP/M sector in the .bios_sdbuf
	ld	bc,.bios_sdbuf
	add	hl,bc			; HL = @ of cpm sector in the .bios_sdbuf

	; copy the data of interest from the SD block
	ld	de,(bios_disk_buf)		; target address
	ld	bc,0080h		; number of bytes to copy
	ldir

	xor	a			; A = 0 = read OK

.bios_read_ret:
	pop	de			; restore saved regs
	pop	bc

	pop	hl			; HL = original saved stack pointer
	ld	sp,hl			; SP = original stack address
	pop	hl			; restore the original  HL value

	ret


;##########################################################################
; A single SD block cache
;##########################################################################
.bios_sdbuf_trk:		; The CP/M track number last left in the .bios_sdbuf
	ds	2,0ffh		; initial value = garbage
.bios_sdbuf_val:		; The CP/M track number in .bios_sdbuf_trk is valid when this is 0
	ds	1,0ffh		; initial value = INVALID
.bios_sdbuf:			; scratch area to use for SD block reading and writing
	ds	512,0a5h	; initial value = garbage


;##########################################################################
; Called once before library is used.
;##########################################################################
nc_init:
;	call	iputs
;	db	'NOTICE: rw_nocache library installed. Disk cache disabled.\r\n\0'

	ld	a,1
	ld	(.bios_sdbuf_val),a     ; mark .bios_sdbuf_trk as invalid
	call sd_boot
	call sd_cmd0
	cp 1
	jr z,.init1
	;Error
	ld a,080h
	jp .sd_err

.init1:	
	ld de,.bios_sdbuf
	call sd_cmd8
	ld a,(.bios_sdbuf)
	cp 1
	jr z,.init2
	;Error
	ld a,081h
	jp .sd_err

.init2:	
	ld	b,128			; max retry
.ac41_loop:
	push	bc			; save BC since B contains the retry count 
	ld	de,.bios_sdbuf		; store command response into LOAD_BASE
	call	sd_acmd41		; ask if the card is ready
	pop	bc			; restore our retry counter
	or	a			; check to see if A is zero
	jr	z,.ac41_done		; is A is zero, then the card is ready

	; Card is not ready, waste some time before trying again
	ld	hl,01000h		; count to 0x1000 to consume time
.ac41_dly:
	dec	hl			; HL = HL -1
	ld	a,h			; does HL == 0?
	or	l
	jr	nz,.ac41_dly		; if HL != 0 then keep counting
	djnz	.ac41_loop		; if (--retries != 0) then try again
	; Error
	ld a,082h
	jp .sd_err
	
.ac41_done:
	ld de,.bios_sdbuf
	call sd_cmd58
	ld	a,(.bios_sdbuf+1)
	and	040h			; CCS bit is here (See spec p275)
	jr	nz,.initdone
	; Error
	ld a,083h
.sd_err:
	push af
	call	iputs
	db	'SDerr: ',0
	ld	a,.debug		; A = the current debug level
	pop af
	call	hexdump_a		; print the current level number
	call	puts_crlf		; and a newline

.initdone:
    ret

; - send at least 74 CLKs
; - send CMD0 & expect reply message = 0x01 (enter SPI mode)
; - send CMD8 (establish that the host uses Version 2.0 SD SPI protocol)
; - send ACMD41 (finish bringing the SD card on line)
; - send CMD58 to verify the card is SDHC/SDXC mode (512-byte block size)


;##########################################################################
; A debug routing for displaying the settings before a read or write
; operation.
;
; Clobbers AF, C
;##########################################################################
if .rw_debug >= 1
bios_debug_disk:
	call	iputs
	db	'disk=0x',0

	ld	a,(bios_disk_disk)
	call	hexdump_a

	call    iputs
	db	', track=0x',0
	ld	a,(bios_disk_track+1)
	call	hexdump_a
	ld	a,(bios_disk_track)
	call	hexdump_a

	call	iputs
	db	', sector=0x',0
	ld	a,(bios_disk_sector+1)
	call	hexdump_a
	ld	a,(bios_disk_sector)
	call	hexdump_a

	call	iputs
	db	', dma=0x',0
	ld	a,(bios_disk_buf)+1
	call	hexdump_a
	ld	a,(bios_disk_buf)
	call	hexdump_a
	call	puts_crlf

	ret
endif
