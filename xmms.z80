org 0100h

.memwin: dw 0 

ld c,0FFh
ld b,01h
call 5
ex de,hl
ld (.memwin),hl

push hl

call iputs
db 'Window: 0x',0
pop hl
push hl
ld a,h
call hex_a
pop hl
ld a,l
call hex_a

call iputs
db 0dh,0ah,0

ld c,0FFh
ld b,0
ld d,0
ld e,010h
call 5

call iputs
db 'Call 1: ',0
ld hl,(.memwin)
ld c,16
.lop:
ld a,(hl)
push hl
push bc
call hex_a
pop bc
pop hl
inc hl
dec c
jr nz,.lop
call iputs
db 0dh,0ah,0

ld c,0FFh
ld b,0
ld d,0
ld e,0Eh
call 5

call iputs
db 'Call 2: ',0
ld hl,(.memwin)
ld c,16
.lop1:
ld a,(hl)
push hl
push bc
call hex_a
pop bc
pop hl
inc hl
dec c
jr nz,.lop1

ret

hex_a:
	push	af
	srl	a
	srl	a
	srl	a
	srl	a
	call	.hexdump_nib
	pop	af
	push	af
	and	00fh
	call	.hexdump_nib
	pop	af
	ret

.hexdump_nib:
	add	'0'
	cp	'9'+1
	jp	m,.hexdump_num
	add	'A'-'9'-1
.hexdump_num:
	ld c,2
	ld	e,a
	jp	5	   ; tail

iputs:
    ex (sp),hl                 ; hl = @ of string to print
	call .puts_loop
    inc hl                      ; point past the end of the string
    ex (sp),hl
    ret

.puts_loop:
    ld a,(hl)                  ; get the next byte to send
    or a
    jr z,.puts_done             ; if A is zero, return
    ld e,a
	ld c,2
	push hl
    call 5
	pop hl
    inc hl                      ; point to next byte to write
    jp .puts_loop
.puts_done:
    ret



end
