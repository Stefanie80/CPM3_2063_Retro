; USER function for CP/M 3 BIOS
.sysdebug 	equ 0
.vdpdebug 	equ 0
.joydebug	equ 1
VDP			equ 1
VDP_font 	equ 0
cr			equ	0dh		; carriage return
lf			equ	0ah		; line feed
joyport0	equ	0a8h	; I/O port for joystick 0
joyport1	equ	0a9h	; I/O port for joystick 1


	extrn	setbank,iputs,hexdump_a
	extrn	@cbnk,@MXTPA
	extrn 	curs0,curs1,isrflags

CSEG

.xmem_base:
	dw 0h	; this must be set by the init call

public tickr0,tickr1

tickr0:
	dw 0h
tickr1:
	dw 0h

public joy0,joy1

joy0:	db 0h
joy1:	db 0h
	
; Calling convention:
;
; B = Function Group
; C = Subfunction
; DE & HL = Parameters / return values
;		
; NOTE:
; 	The first function in the list will always be fastest.
;	Latency is proportional to function number, which is not ideal
;	

; Function descriptions:
;	B = 0 = Memory / System / Timer
;		C = 0 = Save/Load block of Memory to alternate bank
;			D = R/W flag (0=read,1=write)
;			E = Block number
;				 Lets just expose the whole 512k RAM as 256 blocks 
;				 of 2kB each to the user program through an RSX.
;				 This RSX would be attached to the user program if so desired.
;				 It must reserve a memory window in common memory for copying in/out blocks of memory.
;				 It will flag itself for removal at init, so the next program will have the whole TPA again.
;		C = 1 = Initialize RAM Management
;				 This will set the base address for the memory window
;				 If possible, we should at this point figure out which parts of RAM are actually available
;				 Ammount of available RAM depends on the configuration of CP/M 3 during GENCPM.
;		C = 2 = Set timer callbacks.
;				 Both can be set at once, one in DE, one in HL.
;				 To disable, set to 0. You get either 2 different callbacks at 76.25 Hz each,
;				 or set DE=HL to call the same one at 152.5 Hz.
;		C = 3 = Save CCP
;				 Source is hardcoded bank 1, 0x100 (The TPA)
;				 Destination is bank E, 0x0. Size is 0x1000 (4kB)
;		C = 4 = Restore CCP
;				 Source is bank E, 0x0. Size is 0x1000 (4kB)
;				 Destination is bank 1, 0x100 (The TPA)

; 	B = 1 = VDP functions
;		C = 0 = Put Pixel
;		C = 1 = Initialize VDP
;			HL= Pointer to config bytes
;				E = Options
;					0 = only set mode
;		C = 2 = Load font/pattern data from RAM -> VRAM
;			HL= Pointer to memory buffer
;				Size is hardcoded as (256*8*8)=2kB
;		C = 3 = Load font/pattern data from VRAM -> RAM
;			HL= Pointer to memory buffer
;				Size is hardcoded as (256*8*8)=2kB
;		C = 4 = Convert Font in memory
;			HL= Pointer to memory buffer
;				High order 128 chars will be inverted of low order chars
;		C = 5 = Get/Set Colors
;			D = 0=get 1=set
;			E = FG:BG color code, 4 bit each

;	B = 2 = Joysticks
;		C = 0 = Read joy_0
;			Returns value in A
;		C = 1 = Read joy_1
;			Returns value in A
;		C = 2 = Read Both
;			Returns values in H:L
;		C = 3 = Enable/disable autopolling
;			D = Bits 0 + 1 = Joy0/1

public usrfunc
		
usrfunc:
	ld a,b
	or a				
	jp z,.sys		; B == 0
	dec a				
	jp z,.vdp		; B == 1
	dec a				
	jp z,.joy		; B == 2	
	ret

.sys:
	ld a,c
	or a				
	jp z,.xmem		; C == 0
	dec a
	jp z,.mem_init	; C == 1
	dec a
	jp z,.tick_set	; C == 2
	dec a
	jp z,.mem_stccp	; C == 3
	dec a
	jp z,.mem_rlccp	; C == 4
	ret

.vdp:
if VDP
	ld a,c
	or a				
	jp z,.vdp_pp	; C == 0
	dec a
	jp z,.vdp_init	; C == 1
	dec a
	jp z,.vdp_ldfnt	; C == 2
	dec a
	jp z,.vdp_rdfnt	; C == 3
	dec a
	jp z,.vdp_cv	; C == 4
	dec a
	jp z,.vdp_col	; C == 5
endif
	ret
	
.joy:
	ld a,c
	or a				
	jp z,.joy_0	; C == 0
	dec a
	jp z,.joy_1	; C == 1
	dec a
	jp z,.joys	; C == 2
	dec a
	jp z,.joypoll	; C == 3
	ret

; Idea: Timer based autopolling.
; 	If enabled, read the joystick ports in the timer ISR
;	This ticks at 152.5 Hz, every second tick ~76 Hz.
;	Half frequency would be easy to implement, and save I/O within the ISR.
; 	
; Secondary idea: Timer callback function
;	User program supplies a memory address to be called on each/each other tick
;	The code at that address must return with RET, not RETI. It should also be kept as short/fast as possible.

.joypoll:
	; enable autopolling
	ld a,d
	and 03h			; mask out all but the last 2 bits
	ld d,a
	ld a,(isrflags)
	and 0Ch			; mask away the 2 bits
	or d			; and or in the new ones
	ld (isrflags),a
	ld hl,joy0		; return the buffer address 
	ld de,joy0
	ld bc,joy0
if .joydebug
	push hl
	call iputs
	db 	'JOY ADR ',cr,lf,0
	pop hl
	ld a,h
	push hl
	call hexdump_a
	pop hl
	ld a,l
	call hexdump_a
	call iputs
	db 0dh,0ah,0
endif
	ret

.joys:
	; read both joysticks
	in a,(joyport0)
	ld (joy0),a
	ld h,a
	in a,(joyport1)
	ld (joy1),a
	ld l,a
	ret

.joy_0:
	; read joystick 0
	in a,(joyport0)
	ld (joy0),a
	ld e,a
	ld h,a
	ld l,a
	ret
	
.joy_1:
	; read joystick 1
	in a,(joyport1)
	ld (joy1),a
	ld e,a
	ret


if VDP
.vdp_col:
	ld a,d
	or a				
	jr z,.getcol	; C == 0
	dec a
	jr z,.setcol	; C == 1
	;error
	ret
.getcol:
	ld hl,.vdpcol
	ld a,(hl)
	ret
.setcol:
	ld hl,.vdpcol
	ld (hl),e
	ld	a,e				; LSB
	out	(vdp_reg),a
	call .vdp_delay
	ld	a,087h			; MSB
	out	(vdp_reg),a
	ret
		
.vdp_cv:
	ex de,hl
	ld hl,0400h
	add hl,de
	ex de,hl
	; HL=source, DE=destination
	ld c,128
.cvloop:
	ld b,8
.cvlop:	
	ld a,(hl)
	neg
	dec a
	ld (de),a
	inc hl
	inc de
	dec b
	jr nz,.cvlop
	dec c
	jr nz,.cvloop
	ret
	
.vdp_init:
if .vdpdebug
	call iputs
	db 	'VDP INIT ',cr,lf,0
endif
	; Initialize the VDP for Text Mode
	ld	hl,.vdpinit
	ld	b,.vdpinit_len
	ld	c,vdp_reg
	otir				; write the config bytes
	ret

.vdp_pp:
	ret

.vdp_ldfnt:
	; Set the VRAM write address to 0
	ld	a,0				; LSB
	out	(vdp_reg),a
	call .vdp_delay
	ld	a,040h			; MSB
	out	(vdp_reg),a
	ld	c,vdp_vram		; the I/O port number
	ld	de,2048			; number of bytes to send
.ldfnt_loop:
	call .vdp_delay
	outi				; note: this clobbers B
	dec	de
	ld	a,d
	or	e
	jp	nz,.ldfnt_loop
	ret

.vdp_rdfnt:
	; Set the VRAM write address to 0
	ld	a,0				; LSB
	out	(vdp_reg),a
	call .vdp_delay
	out	(vdp_reg),a
	ld	c,vdp_vram		; the I/O port number
	ld	de,2048			; number of bytes to send
.rdfnt_loop:
	call .vdp_delay
	ini				; note: this clobbers B
	dec	de
	ld	a,d
	or	e
	jp	nz,.rdfnt_loop
	ret

endif


	
	
; Assumption: The memory below the BDOS should be free/invalid while saving/loading the CCP
; Therefore, we can use that area to LDIR the CCP rapidly to the E bank.
; This will clobber 0x8000-0x9000 for 4kB in a single LDIR.

.mem_stccp:
	ld a,001h
	call setbank	; setbank 1
	ld hl,0100h		; source 0x100
	ld bc,01000h	; len=0x1000
	ld de,08000h	; dest=0x8000
	ldir
	ld a,00Eh		
	call setbank	; setbank E	
	ld hl,08000h	; source 0x8000
	ld bc,01000h	; len=0x1000
	ld de,000h		; dest=0
	ldir
	ld a,001h
	call setbank	; setbank 1
	ret
	
.mem_rlccp:
	ld a,0Eh
	call setbank	; setbank E
	ld hl,0h		; source 0
	ld bc,01000h	; len=0x1000
	ld de,08000h	; dest=0x8000
	ldir
	ld a,01h
	call setbank	; setbank 1
	ld hl,08000h	; source 0x8000
	ld bc,01000h	; len=0x1000
	ld de,0100h		; dest=0x100	
	ldir
	ret

.xmem:
	ld a,d
	or a				
	jp z,.xmem_load
	dec a
	jp z,.xmem_write
if .sysdebug > 0
	call iputs
	db  'Merr ',0
	ld a,d
	call hexdump_a
	call iputs
	db 0dh,0ah,0
endif
	ret
	
.xmem_load:
if .sysdebug > 0
	push de
	call iputs
	db  'Mload ',0
	ld a,e
	call hexdump_a
	call iputs
	db ' ',0
	pop de
endif
	ld a,(@cbnk)
	push af			; save initial bank
	; determine bank number from block number in E
	ld a,e
	rra
	rra
	rra
	rra
	and 00Fh
if .sysdebug > 0
	push af
	call hexdump_a
	call iputs
	db ':',0	
	pop af
endif	
	; set source bank
	call setbank
	; also determine source address within that bank
	ld a,e
	rla
	rla
	rla
	rla
	and 0F0h
	scf
	ccf
	rra
if .sysdebug > 0
	push af
	call hexdump_a
	call iputs
	db 0dh,0ah,0	
	pop af
endif	
	ld h,a
	ld l,0
	; block size = 2k = 0800h
	ld de,(.xmem_base)
	ld bc,0800h
	ldir
	; reset to original bank
	pop af
	call setbank
	ret
	
.xmem_write:
if .sysdebug > 0
	push de
	call iputs
	db  'Msave ',0
	ld a,e
	call hexdump_a
	call iputs
	db 0dh,0ah,0
	pop de
endif
	ld a,(@cbnk)
	push af			; save initial bank
	; determine bank number from block number in E
	ld a,e
	rra
	rra
	rra
	rra
	and 00Fh
	; set destination bank
	call setbank
	; also determine source address within that bank
	ld a,e
	rla
	rla
	rla
	rla
	and 0F0h
	scf
	ccf
	rra
	ld h,a
	ld l,0
	ex de,hl

	ld hl,(.xmem_base)
	; block size = 2k = 0800h
	ld bc,0800h
	ldir
	;reset to original bank
	pop af
	call setbank
	ret
	
.mem_init:
if .sysdebug > 0
	push de
	call iputs
	db  'Minit ',0
	pop de
	ld a,d
	push de
	call hexdump_a
	pop de
	ld a,e
	push de
	call hexdump_a
	call iputs
	db 0dh,0ah,0
	pop de
endif
	ex de,hl
	ld (.xmem_base),hl
	ld de,(.xmem_base)
	ld bc,(.xmem_base)
	ret

.tick_set:
	ret

if VDP
.vdp_delay:
	push hl
	pop hl
	ret

vdp_vram			equ	080h	; VDP port for accessing the VRAM
vdp_reg				equ	081h	; VDP port for accessing the registers


if VDP_font > 0
.font_6x8:
db 000h,000h,000h,000h,000h,000h,000h,000h ; 000
db 038h,044h,06Ch,044h,054h,044h,038h,000h ; 001
db 038h,07Ch,054h,07Ch,044h,07Ch,038h,000h ; 002
db 000h,028h,07Ch,07Ch,07Ch,038h,010h,000h ; 003
db 000h,010h,038h,07Ch,07Ch,038h,010h,000h ; 004
db 010h,038h,038h,010h,07Ch,07Ch,010h,000h ; 005
db 000h,010h,038h,07Ch,07Ch,010h,038h,000h ; 006
db 000h,000h,000h,000h,000h,000h,000h,000h ; 007
db 000h,000h,000h,000h,000h,000h,000h,000h ; 008
db 000h,000h,000h,000h,000h,000h,000h,000h ; 009
db 000h,000h,000h,000h,000h,000h,000h,000h ; 00A
db 000h,01Ch,00Ch,034h,048h,048h,030h,000h ; 00B
db 038h,044h,044h,038h,010h,038h,010h,000h ; 00C
db 000h,000h,000h,000h,000h,000h,000h,000h ; 00D
db 00Ch,034h,02Ch,034h,02Ch,06Ch,060h,000h ; 00E
db 000h,054h,038h,06Ch,038h,054h,000h,000h ; 00F
db 020h,030h,038h,03Ch,038h,030h,020h,000h ; 010
db 008h,018h,038h,078h,038h,018h,008h,000h ; 011
db 010h,038h,07Ch,010h,07Ch,038h,010h,000h ; 012
db 028h,028h,028h,028h,028h,000h,028h,000h ; 013
db 03Ch,054h,054h,034h,014h,014h,014h,000h ; 014
db 038h,044h,030h,028h,018h,044h,038h,000h ; 015
db 000h,000h,000h,000h,000h,078h,078h,000h ; 016
db 010h,038h,07Ch,010h,07Ch,038h,010h,038h ; 017
db 010h,038h,07Ch,010h,010h,010h,010h,000h ; 018
db 010h,010h,010h,010h,07Ch,038h,010h,000h ; 019
db 000h,010h,018h,07Ch,018h,010h,000h,000h ; 01A
db 000h,010h,030h,07Ch,030h,010h,000h,000h ; 01B
db 000h,000h,000h,040h,040h,040h,07Ch,000h ; 01C
db 000h,028h,028h,07Ch,028h,028h,000h,000h ; 01D
db 010h,010h,038h,038h,07Ch,07Ch,000h,000h ; 01E
db 07Ch,07Ch,038h,038h,010h,010h,000h,000h ; 01F
db 000h,000h,000h,000h,000h,000h,000h,000h ; 020
db 010h,038h,038h,010h,010h,000h,010h,000h ; 021
db 06Ch,06Ch,048h,000h,000h,000h,000h,000h ; 022
db 000h,028h,07Ch,028h,028h,07Ch,028h,000h ; 023
db 020h,038h,040h,030h,008h,070h,010h,000h ; 024
db 064h,064h,008h,010h,020h,04Ch,04Ch,000h ; 025
db 020h,050h,050h,020h,054h,048h,034h,000h ; 026
db 030h,030h,020h,000h,000h,000h,000h,000h ; 027
db 010h,020h,020h,020h,020h,020h,010h,000h ; 028
db 020h,010h,010h,010h,010h,010h,020h,000h ; 029
db 000h,028h,038h,07Ch,038h,028h,000h,000h ; 02A
db 000h,010h,010h,07Ch,010h,010h,000h,000h ; 02B
db 000h,000h,000h,000h,000h,030h,030h,020h ; 02C
db 000h,000h,000h,07Ch,000h,000h,000h,000h ; 02D
db 000h,000h,000h,000h,000h,030h,030h,000h ; 02E
db 000h,004h,008h,010h,020h,040h,000h,000h ; 02F
db 038h,044h,04Ch,054h,064h,044h,038h,000h ; 030
db 010h,030h,010h,010h,010h,010h,038h,000h ; 031
db 038h,044h,004h,018h,020h,040h,07Ch,000h ; 032
db 038h,044h,004h,038h,004h,044h,038h,000h ; 033
db 008h,018h,028h,048h,07Ch,008h,008h,000h ; 034
db 07Ch,040h,040h,078h,004h,044h,038h,000h ; 035
db 018h,020h,040h,078h,044h,044h,038h,000h ; 036
db 07Ch,004h,008h,010h,020h,020h,020h,000h ; 037
db 038h,044h,044h,038h,044h,044h,038h,000h ; 038
db 038h,044h,044h,03Ch,004h,008h,030h,000h ; 039
db 000h,000h,030h,030h,000h,030h,030h,000h ; 03A
db 000h,000h,030h,030h,000h,030h,030h,020h ; 03B
db 008h,010h,020h,040h,020h,010h,008h,000h ; 03C
db 000h,000h,07Ch,000h,000h,07Ch,000h,000h ; 03D
db 020h,010h,008h,004h,008h,010h,020h,000h ; 03E
db 038h,044h,004h,018h,010h,000h,010h,000h ; 03F
db 038h,044h,05Ch,054h,05Ch,040h,038h,000h ; 040
db 038h,044h,044h,044h,07Ch,044h,044h,000h ; 041
db 078h,044h,044h,078h,044h,044h,078h,000h ; 042
db 038h,044h,040h,040h,040h,044h,038h,000h ; 043
db 078h,044h,044h,044h,044h,044h,078h,000h ; 044
db 07Ch,040h,040h,078h,040h,040h,07Ch,000h ; 045
db 07Ch,040h,040h,078h,040h,040h,040h,000h ; 046
db 038h,044h,040h,05Ch,044h,044h,03Ch,000h ; 047
db 044h,044h,044h,07Ch,044h,044h,044h,000h ; 048
db 038h,010h,010h,010h,010h,010h,038h,000h ; 049
db 004h,004h,004h,004h,044h,044h,038h,000h ; 04A
db 044h,048h,050h,060h,050h,048h,044h,000h ; 04B
db 040h,040h,040h,040h,040h,040h,07Ch,000h ; 04C
db 044h,06Ch,054h,044h,044h,044h,044h,000h ; 04D
db 044h,064h,054h,04Ch,044h,044h,044h,000h ; 04E
db 038h,044h,044h,044h,044h,044h,038h,000h ; 04F
db 078h,044h,044h,078h,040h,040h,040h,000h ; 050
db 038h,044h,044h,044h,054h,048h,034h,000h ; 051
db 078h,044h,044h,078h,048h,044h,044h,000h ; 052
db 038h,044h,040h,038h,004h,044h,038h,000h ; 053
db 07Ch,010h,010h,010h,010h,010h,010h,000h ; 054
db 044h,044h,044h,044h,044h,044h,038h,000h ; 055
db 044h,044h,044h,044h,044h,028h,010h,000h ; 056
db 044h,044h,054h,054h,054h,054h,028h,000h ; 057
db 044h,044h,028h,010h,028h,044h,044h,000h ; 058
db 044h,044h,044h,028h,010h,010h,010h,000h ; 059
db 078h,008h,010h,020h,040h,040h,078h,000h ; 05A
db 038h,020h,020h,020h,020h,020h,038h,000h ; 05B
db 000h,040h,020h,010h,008h,004h,000h,000h ; 05C
db 038h,008h,008h,008h,008h,008h,038h,000h ; 05D
db 010h,028h,044h,000h,000h,000h,000h,000h ; 05E
db 000h,000h,000h,000h,000h,000h,000h,0FCh ; 05F
db 030h,030h,010h,000h,000h,000h,000h,000h ; 060
db 000h,000h,038h,004h,03Ch,044h,03Ch,000h ; 061
db 040h,040h,078h,044h,044h,044h,078h,000h ; 062
db 000h,000h,038h,044h,040h,044h,038h,000h ; 063
db 004h,004h,03Ch,044h,044h,044h,03Ch,000h ; 064
db 000h,000h,038h,044h,078h,040h,038h,000h ; 065
db 018h,020h,020h,078h,020h,020h,020h,000h ; 066
db 000h,000h,03Ch,044h,044h,03Ch,004h,038h ; 067
db 040h,040h,070h,048h,048h,048h,048h,000h ; 068
db 010h,000h,010h,010h,010h,010h,018h,000h ; 069
db 008h,000h,018h,008h,008h,008h,048h,030h ; 06A
db 040h,040h,048h,050h,060h,050h,048h,000h ; 06B
db 010h,010h,010h,010h,010h,010h,018h,000h ; 06C
db 000h,000h,068h,054h,054h,044h,044h,000h ; 06D
db 000h,000h,070h,048h,048h,048h,048h,000h ; 06E
db 000h,000h,038h,044h,044h,044h,038h,000h ; 06F
db 000h,000h,078h,044h,044h,044h,078h,040h ; 070
db 000h,000h,03Ch,044h,044h,044h,03Ch,004h ; 071
db 000h,000h,058h,024h,020h,020h,070h,000h ; 072
db 000h,000h,038h,040h,038h,004h,038h,000h ; 073
db 000h,020h,078h,020h,020h,028h,010h,000h ; 074
db 000h,000h,048h,048h,048h,058h,028h,000h ; 075
db 000h,000h,044h,044h,044h,028h,010h,000h ; 076
db 000h,000h,044h,044h,054h,07Ch,028h,000h ; 077
db 000h,000h,048h,048h,030h,048h,048h,000h ; 078
db 000h,000h,048h,048h,048h,038h,010h,060h ; 079
db 000h,000h,078h,008h,030h,040h,078h,000h ; 07A
db 018h,020h,020h,060h,020h,020h,018h,000h ; 07B
db 010h,010h,010h,000h,010h,010h,010h,000h ; 07C
db 030h,008h,008h,00Ch,008h,008h,030h,000h ; 07D
db 028h,050h,000h,000h,000h,000h,000h,000h ; 07E
db 010h,038h,06Ch,044h,044h,07Ch,000h,000h ; 07F
db 038h,044h,040h,040h,044h,038h,010h,030h ; 080
db 048h,000h,048h,048h,048h,058h,028h,000h ; 081
db 00Ch,000h,038h,044h,078h,040h,038h,000h ; 082
db 038h,000h,038h,004h,03Ch,044h,03Ch,000h ; 083
db 028h,000h,038h,004h,03Ch,044h,03Ch,000h ; 084
db 030h,000h,038h,004h,03Ch,044h,03Ch,000h ; 085
db 038h,028h,038h,004h,03Ch,044h,03Ch,000h ; 086
db 000h,038h,044h,040h,044h,038h,010h,030h ; 087
db 038h,000h,038h,044h,078h,040h,038h,000h ; 088
db 028h,000h,038h,044h,078h,040h,038h,000h ; 089
db 030h,000h,038h,044h,078h,040h,038h,000h ; 08A
db 028h,000h,010h,010h,010h,010h,018h,000h ; 08B
db 038h,000h,010h,010h,010h,010h,018h,000h ; 08C
db 020h,000h,010h,010h,010h,010h,018h,000h ; 08D
db 028h,000h,010h,028h,044h,07Ch,044h,000h ; 08E
db 038h,028h,038h,06Ch,044h,07Ch,044h,000h ; 08F
db 00Ch,000h,07Ch,040h,078h,040h,07Ch,000h ; 090
db 000h,000h,078h,014h,07Ch,050h,03Ch,000h ; 091
db 03Ch,050h,050h,07Ch,050h,050h,05Ch,000h ; 092
db 038h,000h,030h,048h,048h,048h,030h,000h ; 093
db 028h,000h,030h,048h,048h,048h,030h,000h ; 094
db 060h,000h,030h,048h,048h,048h,030h,000h ; 095
db 038h,000h,048h,048h,048h,058h,028h,000h ; 096
db 060h,000h,048h,048h,048h,058h,028h,000h ; 097
db 028h,000h,048h,048h,048h,038h,010h,060h ; 098
db 048h,030h,048h,048h,048h,048h,030h,000h ; 099
db 028h,000h,048h,048h,048h,048h,030h,000h ; 09A
db 000h,000h,004h,038h,058h,068h,070h,080h ; 09B
db 018h,024h,020h,078h,020h,024h,05Ch,000h ; 09C
db 03Ch,04Ch,054h,054h,054h,064h,078h,000h ; 09D
db 000h,044h,028h,010h,028h,044h,000h,000h ; 09E
db 008h,014h,010h,038h,010h,010h,050h,020h ; 09F
db 018h,000h,038h,004h,03Ch,044h,03Ch,000h ; 0A0
db 018h,000h,010h,010h,010h,010h,018h,000h ; 0A1
db 018h,000h,030h,048h,048h,048h,030h,000h ; 0A2
db 018h,000h,048h,048h,048h,058h,028h,000h ; 0A3
db 028h,050h,000h,070h,048h,048h,048h,000h ; 0A4
db 028h,050h,000h,048h,068h,058h,048h,000h ; 0A5
db 038h,004h,03Ch,044h,03Ch,000h,03Ch,000h ; 0A6
db 030h,048h,048h,048h,030h,000h,078h,000h ; 0A7
db 010h,000h,010h,030h,040h,044h,038h,000h ; 0A8
db 078h,094h,0ACh,0B4h,0ACh,084h,078h,000h ; 0A9
db 000h,000h,0FCh,004h,004h,000h,000h,000h ; 0AA
db 040h,048h,050h,038h,044h,008h,01Ch,000h ; 0AB
db 040h,048h,050h,02Ch,054h,01Ch,004h,000h ; 0AC
db 010h,000h,010h,010h,038h,038h,010h,000h ; 0AD
db 000h,000h,024h,048h,024h,000h,000h,000h ; 0AE
db 000h,000h,048h,024h,048h,000h,000h,000h ; 0AF
db 054h,000h,0A8h,000h,054h,000h,0A8h,000h ; 0B0
db 054h,0A8h,054h,0A8h,054h,0A8h,054h,0A8h ; 0B1
db 0A8h,0FCh,054h,0FCh,0A8h,0FCh,054h,0FCh ; 0B2
db 010h,010h,010h,010h,010h,010h,010h,010h ; 0B3
db 010h,010h,010h,0F0h,010h,010h,010h,010h ; 0B4
db 018h,000h,010h,028h,044h,07Ch,044h,000h ; 0B5
db 038h,000h,010h,028h,044h,07Ch,044h,000h ; 0B6
db 030h,000h,010h,028h,044h,07Ch,044h,000h ; 0B7
db 078h,084h,0B4h,0A4h,0B4h,084h,078h,000h ; 0B8
db 050h,0D0h,010h,0D0h,050h,050h,050h,050h ; 0B9
db 050h,050h,050h,050h,050h,050h,050h,050h ; 0BA
db 000h,0F0h,010h,0D0h,050h,050h,050h,050h ; 0BB
db 050h,0D0h,010h,0F0h,000h,000h,000h,000h ; 0BC
db 000h,010h,038h,040h,040h,038h,010h,000h ; 0BD
db 044h,028h,010h,07Ch,010h,07Ch,010h,000h ; 0BE
db 000h,000h,000h,0F0h,010h,010h,010h,010h ; 0BF
db 010h,010h,010h,01Ch,000h,000h,000h,000h ; 0C0
db 010h,010h,010h,0FCh,000h,000h,000h,000h ; 0C1
db 000h,000h,000h,0FCh,010h,010h,010h,010h ; 0C2
db 010h,010h,010h,01Ch,010h,010h,010h,010h ; 0C3
db 000h,000h,000h,0FCh,000h,000h,000h,000h ; 0C4
db 010h,010h,010h,0FCh,010h,010h,010h,010h ; 0C5
db 014h,028h,038h,004h,03Ch,044h,03Ch,000h ; 0C6
db 014h,028h,010h,028h,044h,07Ch,044h,000h ; 0C7
db 050h,05Ch,040h,07Ch,000h,000h,000h,000h ; 0C8
db 000h,07Ch,040h,05Ch,050h,050h,050h,050h ; 0C9
db 050h,0DCh,000h,0FCh,000h,000h,000h,000h ; 0CA
db 000h,0FCh,000h,0DCh,050h,050h,050h,050h ; 0CB
db 050h,05Ch,040h,05Ch,050h,050h,050h,050h ; 0CC
db 000h,0FCh,000h,0FCh,000h,000h,000h,000h ; 0CD
db 050h,0DCh,000h,0DCh,050h,050h,050h,050h ; 0CE
db 044h,038h,044h,044h,044h,038h,044h,000h ; 0CF
db 030h,040h,020h,010h,038h,048h,030h,000h ; 0D0
db 038h,024h,024h,074h,024h,024h,038h,000h ; 0D1
db 038h,000h,07Ch,040h,078h,040h,07Ch,000h ; 0D2
db 028h,000h,07Ch,040h,078h,040h,07Ch,000h ; 0D3
db 030h,000h,07Ch,040h,078h,040h,07Ch,000h ; 0D4
db 010h,010h,010h,000h,000h,000h,000h,000h ; 0D5
db 018h,000h,038h,010h,010h,010h,038h,000h ; 0D6
db 038h,000h,038h,010h,010h,010h,038h,000h ; 0D7
db 028h,000h,038h,010h,010h,010h,038h,000h ; 0D8
db 010h,010h,010h,0F0h,000h,000h,000h,000h ; 0D9
db 000h,000h,000h,01Ch,010h,010h,010h,010h ; 0DA
db 0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh,0FCh ; 0DB
db 000h,000h,000h,000h,0FCh,0FCh,0FCh,0FCh ; 0DC
db 010h,010h,010h,000h,010h,010h,010h,000h ; 0DD
db 030h,000h,038h,010h,010h,010h,038h,000h ; 0DE
db 0FCh,0FCh,0FCh,0FCh,000h,000h,000h,000h ; 0DF
db 018h,030h,048h,048h,048h,048h,030h,000h ; 0E0
db 000h,070h,048h,070h,048h,048h,070h,040h ; 0E1
db 038h,030h,048h,048h,048h,048h,030h,000h ; 0E2
db 060h,030h,048h,048h,048h,048h,030h,000h ; 0E3
db 028h,050h,000h,030h,048h,048h,030h,000h ; 0E4
db 028h,050h,030h,048h,048h,048h,030h,000h ; 0E5
db 000h,000h,048h,048h,048h,070h,040h,040h ; 0E6
db 000h,060h,040h,070h,048h,070h,040h,060h ; 0E7
db 060h,040h,070h,048h,048h,070h,040h,060h ; 0E8
db 018h,000h,048h,048h,048h,048h,030h,000h ; 0E9
db 038h,000h,048h,048h,048h,048h,030h,000h ; 0EA
db 060h,000h,048h,048h,048h,048h,030h,000h ; 0EB
db 018h,000h,048h,048h,048h,038h,010h,060h ; 0EC
db 018h,000h,044h,028h,010h,010h,010h,000h ; 0ED
db 000h,038h,000h,000h,000h,000h,000h,000h ; 0EE
db 030h,030h,020h,000h,000h,000h,000h,000h ; 0EF
db 000h,000h,000h,038h,000h,000h,000h,000h ; 0F0
db 000h,010h,038h,010h,000h,038h,000h,000h ; 0F1
db 000h,000h,07Ch,000h,000h,07Ch,000h,000h ; 0F2
db 0C0h,068h,0D0h,02Ch,054h,01Ch,004h,000h ; 0F3
db 03Ch,054h,054h,034h,014h,014h,014h,000h ; 0F4
db 038h,044h,030h,028h,018h,044h,038h,000h ; 0F5
db 000h,010h,000h,07Ch,000h,010h,000h,000h ; 0F6
db 000h,000h,000h,038h,018h,000h,000h,000h ; 0F7
db 030h,048h,048h,030h,000h,000h,000h,000h ; 0F8
db 000h,000h,000h,028h,000h,000h,000h,000h ; 0F9
db 000h,000h,000h,020h,000h,000h,000h,000h ; 0FA
db 020h,060h,020h,020h,000h,000h,000h,000h ; 0FB
db 070h,020h,030h,060h,000h,000h,000h,000h ; 0FC
db 060h,010h,020h,070h,000h,000h,000h,000h ; 0FD
db 000h,000h,078h,078h,078h,078h,000h,000h ; 0FE
db 000h,000h,000h,000h,000h,000h,000h,000h 	; 0FF

endif 

.vdpinit:
			db	00000000b,080h	; R0 = Text mode, no EXT video
			db	11010000b,081h	; R1 = 16K RAM, enable display, disable INT, 8x8 sprites, mag off
			db	00000010b,082h	; R2 = name table = 0x0800
			db	00000000b,084h	; R4 = pattern table = 0x0000
.vdpcol:	db	11110101b,087h	; R7 = white on light blue
.vdpinit_len: equ	$-.vdpinit	; number of bytes to write
endif

	end
	