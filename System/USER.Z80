; USER function for CP/M 3 BIOS
.sysdebug 	equ 0
.vdpdebug 	equ 0
.joydebug	equ 0
VDP			equ 0
VDP_font 	equ 0
cr			equ	0dh		; carriage return
lf			equ	0ah		; line feed
joyport0	equ	0a8h	; I/O port for joystick 0
joyport1	equ	0a9h	; I/O port for joystick 1


	extrn	setbank,iputs,hexdump_a
	extrn	@cbnk,@MXTPA
if VDP
	extrn 	vdp_cnt,curs0,curs1
vdp_vram		equ	080h	; VDP port for accessing the VRAM
vdp_reg			equ	081h	; VDP port for accessing the registers

endif
	extrn 	loadmbr,savembr ;,isrflags

CSEG

.xmem_base:
	dw 0h	; this must be set by the init call

public tickr0,tickr1
tickr0:	dw 0h
tickr1:	dw 0h

public 	joy0,joy1
joy0:	db 0h
joy1:	db 0h

vdpfnt:	db 0h

; Calling convention:
;
; B = Function Group
; C = Subfunction
; DE & HL = Parameters / return values
;		
; NOTE:
; 	The first function in the list will always be fastest.
;	Latency is proportional to function number, which is not ideal
;	

; Function descriptions:
;	B = 0 = Memory / System / Timer
;		C = 0 = Save/Load block of Memory to alternate bank
;			D = R/W flag (0=read,1=write)
;			E = Block number
;				 Lets just expose the whole 512k RAM as 256 blocks 
;				 of 2kB each to the user program through an RSX.
;				 This RSX would be attached to the user program if so desired.
;				 It must reserve a memory window in common memory for copying in/out blocks of memory.
;				 It will flag itself for removal at init, so the next program will have the whole TPA again.
;		C = 1 = Initialize RAM Management
;				 This will set the base address for the memory window
;				 If possible, we should at this point figure out which parts of RAM are actually available
;				 Ammount of available RAM depends on the configuration of CP/M 3 during GENCPM.
;		C = 2 = Set timer callbacks.
;				 Both can be set at once, one in DE, one in HL.
;				 To disable, set to 0. You get either 2 different callbacks at 76.25 Hz each,
;				 or set DE=HL to call the same one at 152.5 Hz.
;		C = 3 = Save CCP
;				 Source is hardcoded bank 1, 0x100 (The TPA)
;				 Destination is bank E, 0x0. Size is 0x1000 (4kB)
;		C = 4 = Restore CCP
;				 Source is bank E, 0x0. Size is 0x1000 (4kB)
;				 Destination is bank 1, 0x100 (The TPA)
;		C = 5 = Load/Save MBR
;			D = R/W flag (0=read,1=write)
;				Buffer adress is hardcoded to 0x8000
			
; 	B = 1 = VDP functions
;		C = 0 = Put Pixel
;		C = 1 = Initialize VDP
;			HL= Pointer to config bytes
;				E = Options
;					0 = only set mode
;		C = 2 = Load font/pattern data from RAM -> VRAM
;			HL= Pointer to memory buffer
;				Size is hardcoded as (256*8*8)=2kB
;		C = 3 = Load font/pattern data from VRAM -> RAM
;			HL= Pointer to memory buffer
;				Size is hardcoded as (256*8*8)=2kB
;		C = 4 = Convert Font in memory
;			HL= Pointer to memory buffer
;				High order 128 chars will be inverted of low order chars
;		C = 5 = Get/Set Colors
;			D = 0=get 1=set
;			E = FG:BG color code, 4 bit each
;		C = 6 = Clear the screen

;	B = 2 = Joysticks
;		C = 0 = Read joy_0
;			Returns value in A
;		C = 1 = Read joy_1
;			Returns value in A
;		C = 2 = Read Both
;			Returns values in H:L
;		C = 3 = Enable/disable autopolling
;			D = Bits 0 + 1 = Joy0/1

public usrfunc
		
usrfunc:
	ld a,b
	or a				
	jr z,.sys		; B == 0
	dec a				
	jr z,.vdp		; B == 1
	dec a				
	jr z,.joy		; B == 2	
	ret

.sys:
	ld a,c
	or a				
	jp z,.xmem		; C == 0
	dec a
	jp z,.mem_init	; C == 1
	dec a
	jp z,.tick_set	; C == 2
	dec a
	jp z,.mem_stccp	; C == 3
	dec a
	jp z,.mem_rlccp	; C == 4
	dec a
	jp z,.mbr		; C == 5
	ret

.vdp:
if VDP
	ld a,c
	or a				
	jp z,.vdp_pp	; C == 0
	dec a
	jp z,.vdp_init	; C == 1
	dec a
	jp z,.vdp_ldfnt	; C == 2
	dec a
	jp z,.vdp_rdfnt	; C == 3
	dec a
	jp z,.vdp_cv	; C == 4
	dec a
	jp z,.vdp_col	; C == 5
	dec a
	jp z,.vdp_cls	; C == 6
endif
	ret
	
.joy:
	ld a,c
	or a				
	jr z,.joy_0	; C == 0
	dec a
	jr z,.joy_1	; C == 1
	dec a
	jr z,.joys	; C == 2
	dec a
	jr z,.joypoll	; C == 3
	ret

; Idea: Timer based autopolling.
; 	If enabled, read the joystick ports in the timer ISR
;	This ticks at 152.5 Hz, every second tick ~76 Hz.
;	Half frequency would be easy to implement, and save I/O within the ISR.
; 	
; Secondary idea: Timer callback function
;	User program supplies a memory address to be called on each/each other tick
;	The code at that address must return with RET, not RETI. It should also be kept as short/fast as possible.

.joypoll:
	; enable autopolling
	; ld a,d
	; and 03h			; mask out all but the last 2 bits
	; ld d,a
	; ld a,(isrflags)
	; and 0Ch			; mask away the 2 bits
	; or d			; and or in the new ones
	; ld (isrflags),a
	; ld hl,joy0		; return the buffer address 
	; ld de,joy0
	; ld bc,joy0
; if .joydebug
	; push hl
	; call iputs
	; db 	'JOY ADR ',cr,lf,0
	; pop hl
	; ld a,h
	; push hl
	; call hexdump_a
	; pop hl
	; ld a,l
	; call hexdump_a
	; call iputs
	; db 0dh,0ah,0
; endif
	ret

.joys:
	; read both joysticks
	in a,(joyport0)
	ld (joy0),a
	ld h,a
	in a,(joyport1)
	ld (joy1),a
	ld l,a
	ret

.joy_0:
	; read joystick 0
	in a,(joyport0)
	ld (joy0),a
	ld e,a
	ld h,a
	ld l,a
	ret
	
.joy_1:
	; read joystick 1
	in a,(joyport1)
	ld (joy1),a
	ld e,a
	ret


if VDP
extrn vdelay
.vdp_delay equ vdelay

.vdpinit:
			db	00000000b,080h	; R0 = Text mode, no EXT video
			db	11010000b,081h	; R1 = 16K RAM, enable display, disable INT, 8x8 sprites, mag off
			db	00000010b,082h	; R2 = name table = 0x0800
			db	00000000b,084h	; R4 = pattern table = 0x0000
.vdpcol:	db	11110101b,087h	; R7 = white on light blue
.vdpinit_len: equ	$-.vdpinit	; number of bytes to write

.vdp_cls:
if .vdpdebug
	call iputs
	db 'Vcls',cr,lf,0
endif
	ld hl,0800h		; offset for VRAM
	ld a,l
	out (vdp_reg),a
	ld a,040h
	or h
	out (vdp_reg),a	; VDP address loaded
	ld b,80
	ld c,24
	ld a,' '
.cls:	
	out (vdp_vram),a	; Write to the VDP
	call .vdp_delay
	dec b
	jr nz,.cls
	dec c
	ld b,80
	jr nz,.cls


.vdp_col:
if .vdpdebug
	push de
	call iputs
	db 'Vcol',cr,lf,0
	pop de
endif
	ld a,d
	or a				
	jr z,.getcol	; C == 0
	dec a
	jr z,.setcol	; C == 1
	;error
	ret
.getcol:
	ld hl,.vdpcol
	ld a,(hl)
	ret
.setcol:
	ld hl,.vdpcol
	ld (hl),e
	ld	a,e				; LSB
	out	(vdp_reg),a
	call .vdp_delay
	ld	a,087h			; MSB
	out	(vdp_reg),a
	ret
		
.vdp_cv:
if .vdpdebug
	push de
	push hl
	call iputs
	db 'Vcv',cr,lf,0
	pop hl
	pop de
endif
	ex de,hl
	ld hl,0400h
	add hl,de
	ex de,hl
	; HL=source, DE=destination
	ld c,128		; 128 Characters
.cvloop:
	ld b,8			; 8 bytes / char
.cvlop:	
	ld a,(hl)
	cpl
	ld (de),a
	inc hl
	inc de
	dec b
	jr nz,.cvlop	; next byte
	dec c
	jr nz,.cvloop	; next char
	ret
	
.vdp_init:
if .vdpdebug
	call iputs
	db 	'VDP INIT ',cr,lf,0
endif
	; Initialize the VDP for Text Mode
	ld	hl,.vdpinit
	ld	b,.vdpinit_len
	ld	c,vdp_reg
	otir				; write the config bytes
	ret

.vdp_pp:
	ret

.vdp_ldfnt:
	; Set the VRAM write address to 0
	ld	a,0				; LSB
	out	(vdp_reg),a
	call .vdp_delay
	ld	a,040h			; MSB
	out	(vdp_reg),a
	ld	c,vdp_vram		; the I/O port number
	ld	de,2048			; number of bytes to send
.ldfnt_loop:
	call .vdp_delay
	outi				; note: this clobbers B
	dec	de
	ld	a,d
	or	e
	jp	nz,.ldfnt_loop
	ret

.vdp_rdfnt:
	; Set the VRAM write address to 0
	ld	a,0				; LSB
	out	(vdp_reg),a
	call .vdp_delay
	out	(vdp_reg),a
	ld	c,vdp_vram		; the I/O port number
	ld	de,2048			; number of bytes to send
.rdfnt_loop:
	call .vdp_delay
	ini				; note: this clobbers B
	dec	de
	ld	a,d
	or	e
	jp	nz,.rdfnt_loop
	ret

endif


	
	
; Assumption: The memory below the BDOS should be free/invalid while saving/loading the CCP
; Therefore, we can use that area to LDIR the CCP rapidly to the E bank.
; This will clobber 0x8000-0x9000 for 4kB in a single LDIR.

.mem_stccp:
	ld a,001h
	call setbank	; setbank 1
	ld hl,0100h		; source 0x100
	ld bc,01000h	; len=0x1000
	ld de,08000h	; dest=0x8000
	ldir
	ld a,00Eh		
	call setbank	; setbank E	
	ld hl,08000h	; source 0x8000
	ld bc,01000h	; len=0x1000
	ld de,000h		; dest=0
	ldir
	ld a,001h
	call setbank	; setbank 1
	ret
	
.mem_rlccp:
	ld a,0Eh
	call setbank	; setbank E
	ld hl,0h		; source 0
	ld bc,01000h	; len=0x1000
	ld de,08000h	; dest=0x8000
	ldir
	ld a,01h
	call setbank	; setbank 1
	ld hl,08000h	; source 0x8000
	ld bc,01000h	; len=0x1000
	ld de,0100h		; dest=0x100	
	ldir
	ret

.xmem:
	ld a,d
	or a				
	jp z,.xmem_load
	dec a
	jp z,.xmem_write
if .sysdebug > 0
	call iputs
	db  'Merr ',0
	ld a,d
	call hexdump_a
	call iputs
	db 0dh,0ah,0
endif
	ret
	
.xmem_load:
if .sysdebug > 0
	push de
	call iputs
	db  'Mload ',0
	ld a,e
	call hexdump_a
	call iputs
	db ' ',0
	pop de
endif
	ld a,(@cbnk)
	push af			; save initial bank
	; determine bank number from block number in E
	ld a,e
	rra
	rra
	rra
	rra
	and 00Fh
if .sysdebug > 0
	push af
	call hexdump_a
	call iputs
	db ':',0	
	pop af
endif	
	; set source bank
	call setbank
	; also determine source address within that bank
	ld a,e
	rla
	rla
	rla
	rla
	and 0F0h
	;scf
	;ccf
	rra
if .sysdebug > 0
	push af
	call hexdump_a
	call iputs
	db 0dh,0ah,0	
	pop af
endif	
	ld h,a
	ld l,0
	; block size = 2k = 0800h
	ld de,(.xmem_base)
	ld bc,0800h
	ldir
	; reset to original bank
	pop af
	call setbank
	ret
	
.xmem_write:
if .sysdebug > 0
	push de
	call iputs
	db  'Msave ',0
	ld a,e
	call hexdump_a
	call iputs
	db 0dh,0ah,0
	pop de
endif
	ld a,(@cbnk)
	push af			; save initial bank
	; determine bank number from block number in E
	ld a,e
	rra
	rra
	rra
	rra
	and 00Fh
	; set destination bank
	call setbank
	; also determine source address within that bank
	ld a,e
	rla
	rla
	rla
	rla
	and 0F0h
	;scf
	;ccf
	rra
	ld h,a
	ld l,0
	ex de,hl

	ld hl,(.xmem_base)
	; block size = 2k = 0800h
	ld bc,0800h
	ldir
	;reset to original bank
	pop af
	call setbank
	ret
	
.mem_init:
if .sysdebug > 0
	push de
	call iputs
	db  'Minit ',0
	pop de
	ld a,d
	push de
	call hexdump_a
	pop de
	ld a,e
	push de
	call hexdump_a
	call iputs
	db 0dh,0ah,0
	pop de
endif
	ex de,hl
	ld (.xmem_base),hl
	ld de,(.xmem_base)
	ld bc,(.xmem_base)
	ret

.tick_set:
	; ld (tickr0),hl
	; ld a,h
	; or l
	; jr nz,.enabl0
	; ld a,(isrflags)
	; and 0FBh
	; ld (isrflags),a
; .enabl0: 
	; ld a,(isrflags)
	; or 004h
	; ld (isrflags),a
	
	; ld (tickr1),de
	; ld a,d
	; or e
	; jr nz,.enabl1
	; ld a,(isrflags)
	; and 0F7h
	; ld (isrflags),a
; .enabl1:
	; ld a,(isrflags)
	; or 008h
	; ld (isrflags),a
	ret

.mbr:
	ld a,d
	or a				
	jr z,.mbr_load
	dec a
	jr z,.mbr_write
	ret

.mbr_load:
	call loadmbr
	ret

.mbr_write:
	call savembr
	ret


	end
	